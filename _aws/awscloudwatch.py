import base64
from inspect import currentframe
from typing import List, Dict, Any, Union
from logging import Logger as Log
from _meta import _meta as _meta_
from _config import config as _config_
from _aws import awsclient_config as _aws_config_
from _common import _common as _common_


class AwsApiAWSCloudWatch(metaclass=_meta_.Meta):
    def __init__(self, config: _config_.ConfigSingleton = None, logger: Log = None):
        self._config = config if config else _config_.ConfigSingleton()

        self._session = _aws_config_.setup_session_by_profile(self._config.config.get("aws_profile_name"), self._config.config.get("aws_region_name")) if \
            self._config.config.get("aws_profile_name") and self._config.config.get("aws_region_name") else _aws_config_.setup_session(self._config)

        self._client = self._session.client("cloudwatch")

    """
     
    
    """
    @_common_.exception_handler
    def create_cloudwatch_alarm_r53_health_check(self,
                                                 cloudwatch_alarm_name: str,
                                                 HealthCheckId: str,
                                                 metric_name: str,
                                                 threshold: int,
                                                 namespace: str,
                                                 evaluation_periods: int = 1,
                                                 comparison_operator: str = "GreaterThanThreshold",
                                                 period: int = 60,
                                                 statistic: str = "Sum",
                                                 alarm_actions: str = None,
                                                 logger: Log = None,
                                                 *args,
                                                 **kwargs) -> Union[Dict, List]:



        _parameters = {"AlarmName": cloudwatch_alarm_name,
                       "ComparisonOperator": comparison_operator,
                       "MetricName": metric_name,
                       "Period": period,
                       "Namespace": namespace,
                       "Statistic": statistic,
                       "ActionsEnabled": True,
                       "AlarmDescription": f"{cloudwatch_alarm_name} is generated by sysEng toolset",
                       "Dimensions": [{
                                        "Name": "HealthCheckId",
                                        "Value": HealthCheckId
                       }],
                       "Threshold": threshold,

                       "Unit": "Count",
                       "EvaluationPeriods": evaluation_periods,
                       }

        if alarm_actions:
            _parameters = {**_parameters, **{"AlarmActions": [alarm_actions]}}

        _response = self._client.put_metric_alarm(**_parameters)
        print(_response)
        if _response.get("ResponseMetadata").get("HTTPStatusCode") == 200:
            pass

        else:
            return []



